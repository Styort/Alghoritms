// Дан отсортированный по неубыванию массив целых чисел а, индекс элемента index и
// целое число k.
// Необходимо вернуть в любом порядке k чисел из массива, которые являются ближайшими
// по значению к элементу a[index].

// Решать задачу будем методом двух указателей.
// Идем от индекса index в 2 стороны и ищем ближайшее число к a[index] смещая указатели.
// Пример:
// [2, 3, 5, 7, 11], index = 3, k = 3

// l = index - 1 = 2
// r = index + 1 = 4
// [2, 3, 5, 7, 11]
//     l     r
// a[index] добавляем сразу же в результирующий массив
// a[3] - abs(a[l]) = 2
// a[3] - abs(a[r]) = 2
// Рядомстоящие числа одинаково отдалены от a[index], берём любое. В данном случае возьмём число,
// от правого указателя (a[4] = 7)
// res = [5, 7]
// Сдвигаем правый указатель на + 1.
// l = 2, r = 5
// [2, 3, 5, 7, 11]
//     l        r
// Проверяем какое число ближе к 5.
// a[3] - abs(a[2]) = |5 -  2| = 2
// a[5] - abs(a[5]) = |5 - 11| = 6
// Ближайшее число к 5 - 2.
// res = [5, 7, 3]
// т.к. в результирующем массиве уже k чисел, отдаём результат
List<int> getNearestNumbers(List<int> a, int index, int k) {
  if (a.isEmpty) return a;
  if (a.length <= k) return a;

  // a[index] добавляем сразу же в результирующий массив
  List<int> result = [a[index]];

  var l = index - 1;
  var r = index + 1;

  // Пока не набрали нужное количество чисел, идем по массиву
  while (result.length < k) {
    // При null значение указателя не учитывается
    var leftNum = l >= 0 ? a[l] : null;
    var rightNum = r < a.length ? a[r] : null;

    // Проверяем насколько отдалены от исходного числа те числа, на которые показывают сейчас указатели
    var leftOffset = leftNum == null ? null : a[index] - leftNum;
    var rightOffset = rightNum == null ? null : rightNum - a[index];

    // Смотрим какое число отдалено от исходного меньше всего и добавляем его в результирующий массив
    // Сдвигаем при этом указатель данного направления на 1
    if ((leftOffset != null && rightOffset != null && leftOffset < rightOffset) || (leftOffset != null && rightOffset == null)) {
      result.add(a[l]);
      l--;
    } else {
      result.add(a[r]);
      r++;
    }
  }

  return result;
}
